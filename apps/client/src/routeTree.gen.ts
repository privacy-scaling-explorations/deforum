/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/_router_root';
import { Route as LeftSidebarImport } from './routes/left_sidebar_router';
import { Route as AppImport } from './routes/app_router';
import { Route as AppIndexImport } from './routes/app_router/index';
import { Route as LeftSidebarProfileImport } from './routes/sidebar_router/profile';
import { Route as LeftSidebarNotificationsImport } from './routes/sidebar_router/notifications';
import { Route as AppSettingsImport } from './routes/app_router/settings';
import { Route as LeftSidebarCommunitiesIndexImport } from './routes/sidebar_router/communities_sidebar_route/index';
import { Route as LeftSidebarBadgesIndexImport } from './routes/sidebar_router/badges_sidebar_route/index';
import { Route as LeftSidebarUsernameUsernameImport } from './routes/sidebar_router/username_sidebar_route/$username';
import { Route as LeftSidebarPostDraftsImport } from './routes/sidebar_router/post_sidebar_route/drafts';
import { Route as LeftSidebarPostCreateImport } from './routes/sidebar_router/post_sidebar_route/create';
import { Route as LeftSidebarCommunitiesSlugImport } from './routes/sidebar_router/communities_sidebar_route/$slug';
import { Route as LeftSidebarBadgesNewImport } from './routes/sidebar_router/badges_sidebar_route/new';
import { Route as AppPostsPostIdImport } from './routes/app_router/posts_route/$postId';

// Create/Update Routes

const LeftSidebarRoute = LeftSidebarImport.update({
  id: '/_left-sidebar',
  getParentRoute: () => rootRoute
} as any);

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute
} as any);

const AppIndexRoute = AppIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute
} as any);

const LeftSidebarProfileRoute = LeftSidebarProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarNotificationsRoute = LeftSidebarNotificationsImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => LeftSidebarRoute
} as any);

const AppSettingsRoute = AppSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AppRoute
} as any);

const LeftSidebarCommunitiesIndexRoute = LeftSidebarCommunitiesIndexImport.update({
  id: '/communities/',
  path: '/communities/',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarBadgesIndexRoute = LeftSidebarBadgesIndexImport.update({
  id: '/badges/',
  path: '/badges/',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarUsernameUsernameRoute = LeftSidebarUsernameUsernameImport.update({
  id: '/username/$username',
  path: '/username/$username',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarPostDraftsRoute = LeftSidebarPostDraftsImport.update({
  id: '/post/drafts',
  path: '/post/drafts',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarPostCreateRoute = LeftSidebarPostCreateImport.update({
  id: '/post/create',
  path: '/post/create',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarCommunitiesSlugRoute = LeftSidebarCommunitiesSlugImport.update({
  id: '/communities/$slug',
  path: '/communities/$slug',
  getParentRoute: () => LeftSidebarRoute
} as any);

const LeftSidebarBadgesNewRoute = LeftSidebarBadgesNewImport.update({
  id: '/badges/new',
  path: '/badges/new',
  getParentRoute: () => LeftSidebarRoute
} as any);

const AppPostsPostIdRoute = AppPostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => AppRoute
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AppImport;
      parentRoute: typeof rootRoute;
    };
    '/_left-sidebar': {
      id: '/_left-sidebar';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof LeftSidebarImport;
      parentRoute: typeof rootRoute;
    };
    '/_app/settings': {
      id: '/_app/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof AppSettingsImport;
      parentRoute: typeof AppImport;
    };
    '/_left-sidebar/notifications': {
      id: '/_left-sidebar/notifications';
      path: '/notifications';
      fullPath: '/notifications';
      preLoaderRoute: typeof LeftSidebarNotificationsImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/profile': {
      id: '/_left-sidebar/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof LeftSidebarProfileImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_app/': {
      id: '/_app/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AppIndexImport;
      parentRoute: typeof AppImport;
    };
    '/_app/posts/$postId': {
      id: '/_app/posts/$postId';
      path: '/posts/$postId';
      fullPath: '/posts/$postId';
      preLoaderRoute: typeof AppPostsPostIdImport;
      parentRoute: typeof AppImport;
    };
    '/_left-sidebar/badges/new': {
      id: '/_left-sidebar/badges/new';
      path: '/badges/new';
      fullPath: '/badges/new';
      preLoaderRoute: typeof LeftSidebarBadgesNewImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/communities/$slug': {
      id: '/_left-sidebar/communities/$slug';
      path: '/communities/$slug';
      fullPath: '/communities/$slug';
      preLoaderRoute: typeof LeftSidebarCommunitiesSlugImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/post/create': {
      id: '/_left-sidebar/post/create';
      path: '/post/create';
      fullPath: '/post/create';
      preLoaderRoute: typeof LeftSidebarPostCreateImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/post/drafts': {
      id: '/_left-sidebar/post/drafts';
      path: '/post/drafts';
      fullPath: '/post/drafts';
      preLoaderRoute: typeof LeftSidebarPostDraftsImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/username/$username': {
      id: '/_left-sidebar/username/$username';
      path: '/username/$username';
      fullPath: '/username/$username';
      preLoaderRoute: typeof LeftSidebarUsernameUsernameImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/badges/': {
      id: '/_left-sidebar/badges/';
      path: '/badges';
      fullPath: '/badges';
      preLoaderRoute: typeof LeftSidebarBadgesIndexImport;
      parentRoute: typeof LeftSidebarImport;
    };
    '/_left-sidebar/communities/': {
      id: '/_left-sidebar/communities/';
      path: '/communities';
      fullPath: '/communities';
      preLoaderRoute: typeof LeftSidebarCommunitiesIndexImport;
      parentRoute: typeof LeftSidebarImport;
    };
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppSettingsRoute: typeof AppSettingsRoute;
  AppIndexRoute: typeof AppIndexRoute;
  AppPostsPostIdRoute: typeof AppPostsPostIdRoute;
}

const AppRouteChildren: AppRouteChildren = {
  AppSettingsRoute: AppSettingsRoute,
  AppIndexRoute: AppIndexRoute,
  AppPostsPostIdRoute: AppPostsPostIdRoute
};

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren);

interface LeftSidebarRouteChildren {
  LeftSidebarNotificationsRoute: typeof LeftSidebarNotificationsRoute;
  LeftSidebarProfileRoute: typeof LeftSidebarProfileRoute;
  LeftSidebarBadgesNewRoute: typeof LeftSidebarBadgesNewRoute;
  LeftSidebarCommunitiesSlugRoute: typeof LeftSidebarCommunitiesSlugRoute;
  LeftSidebarPostCreateRoute: typeof LeftSidebarPostCreateRoute;
  LeftSidebarPostDraftsRoute: typeof LeftSidebarPostDraftsRoute;
  LeftSidebarUsernameUsernameRoute: typeof LeftSidebarUsernameUsernameRoute;
  LeftSidebarBadgesIndexRoute: typeof LeftSidebarBadgesIndexRoute;
  LeftSidebarCommunitiesIndexRoute: typeof LeftSidebarCommunitiesIndexRoute;
}

const LeftSidebarRouteChildren: LeftSidebarRouteChildren = {
  LeftSidebarNotificationsRoute: LeftSidebarNotificationsRoute,
  LeftSidebarProfileRoute: LeftSidebarProfileRoute,
  LeftSidebarBadgesNewRoute: LeftSidebarBadgesNewRoute,
  LeftSidebarCommunitiesSlugRoute: LeftSidebarCommunitiesSlugRoute,
  LeftSidebarPostCreateRoute: LeftSidebarPostCreateRoute,
  LeftSidebarPostDraftsRoute: LeftSidebarPostDraftsRoute,
  LeftSidebarUsernameUsernameRoute: LeftSidebarUsernameUsernameRoute,
  LeftSidebarBadgesIndexRoute: LeftSidebarBadgesIndexRoute,
  LeftSidebarCommunitiesIndexRoute: LeftSidebarCommunitiesIndexRoute
};

const LeftSidebarRouteWithChildren = LeftSidebarRoute._addFileChildren(LeftSidebarRouteChildren);

export interface FileRoutesByFullPath {
  '': typeof LeftSidebarRouteWithChildren;
  '/settings': typeof AppSettingsRoute;
  '/notifications': typeof LeftSidebarNotificationsRoute;
  '/profile': typeof LeftSidebarProfileRoute;
  '/': typeof AppIndexRoute;
  '/posts/$postId': typeof AppPostsPostIdRoute;
  '/badges/new': typeof LeftSidebarBadgesNewRoute;
  '/communities/$slug': typeof LeftSidebarCommunitiesSlugRoute;
  '/post/create': typeof LeftSidebarPostCreateRoute;
  '/post/drafts': typeof LeftSidebarPostDraftsRoute;
  '/username/$username': typeof LeftSidebarUsernameUsernameRoute;
  '/badges': typeof LeftSidebarBadgesIndexRoute;
  '/communities': typeof LeftSidebarCommunitiesIndexRoute;
}

export interface FileRoutesByTo {
  '': typeof LeftSidebarRouteWithChildren;
  '/settings': typeof AppSettingsRoute;
  '/notifications': typeof LeftSidebarNotificationsRoute;
  '/profile': typeof LeftSidebarProfileRoute;
  '/': typeof AppIndexRoute;
  '/posts/$postId': typeof AppPostsPostIdRoute;
  '/badges/new': typeof LeftSidebarBadgesNewRoute;
  '/communities/$slug': typeof LeftSidebarCommunitiesSlugRoute;
  '/post/create': typeof LeftSidebarPostCreateRoute;
  '/post/drafts': typeof LeftSidebarPostDraftsRoute;
  '/username/$username': typeof LeftSidebarUsernameUsernameRoute;
  '/badges': typeof LeftSidebarBadgesIndexRoute;
  '/communities': typeof LeftSidebarCommunitiesIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/_app': typeof AppRouteWithChildren;
  '/_left-sidebar': typeof LeftSidebarRouteWithChildren;
  '/_app/settings': typeof AppSettingsRoute;
  '/_left-sidebar/notifications': typeof LeftSidebarNotificationsRoute;
  '/_left-sidebar/profile': typeof LeftSidebarProfileRoute;
  '/_app/': typeof AppIndexRoute;
  '/_app/posts/$postId': typeof AppPostsPostIdRoute;
  '/_left-sidebar/badges/new': typeof LeftSidebarBadgesNewRoute;
  '/_left-sidebar/communities/$slug': typeof LeftSidebarCommunitiesSlugRoute;
  '/_left-sidebar/post/create': typeof LeftSidebarPostCreateRoute;
  '/_left-sidebar/post/drafts': typeof LeftSidebarPostDraftsRoute;
  '/_left-sidebar/username/$username': typeof LeftSidebarUsernameUsernameRoute;
  '/_left-sidebar/badges/': typeof LeftSidebarBadgesIndexRoute;
  '/_left-sidebar/communities/': typeof LeftSidebarCommunitiesIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | ''
    | '/settings'
    | '/notifications'
    | '/profile'
    | '/'
    | '/posts/$postId'
    | '/badges/new'
    | '/communities/$slug'
    | '/post/create'
    | '/post/drafts'
    | '/username/$username'
    | '/badges'
    | '/communities';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | ''
    | '/settings'
    | '/notifications'
    | '/profile'
    | '/'
    | '/posts/$postId'
    | '/badges/new'
    | '/communities/$slug'
    | '/post/create'
    | '/post/drafts'
    | '/username/$username'
    | '/badges'
    | '/communities';
  id:
    | '__root__'
    | '/_app'
    | '/_left-sidebar'
    | '/_app/settings'
    | '/_left-sidebar/notifications'
    | '/_left-sidebar/profile'
    | '/_app/'
    | '/_app/posts/$postId'
    | '/_left-sidebar/badges/new'
    | '/_left-sidebar/communities/$slug'
    | '/_left-sidebar/post/create'
    | '/_left-sidebar/post/drafts'
    | '/_left-sidebar/username/$username'
    | '/_left-sidebar/badges/'
    | '/_left-sidebar/communities/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren;
  LeftSidebarRoute: typeof LeftSidebarRouteWithChildren;
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  LeftSidebarRoute: LeftSidebarRouteWithChildren
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/_left-sidebar"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/settings",
        "/_app/",
        "/_app/posts/$postId"
      ]
    },
    "/_left-sidebar": {
      "filePath": "_left-sidebar.tsx",
      "children": [
        "/_left-sidebar/notifications",
        "/_left-sidebar/profile",
        "/_left-sidebar/badges/new",
        "/_left-sidebar/communities/$slug",
        "/_left-sidebar/post/create",
        "/_left-sidebar/post/drafts",
        "/_left-sidebar/username/$username",
        "/_left-sidebar/badges/",
        "/_left-sidebar/communities/"
      ]
    },
    "/_app/settings": {
      "filePath": "_app/settings.tsx",
      "parent": "/_app"
    },
    "/_left-sidebar/notifications": {
      "filePath": "_left-sidebar/notifications.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/profile": {
      "filePath": "_left-sidebar/profile.tsx",
      "parent": "/_left-sidebar"
    },
    "/_app/": {
      "filePath": "_app/index.tsx",
      "parent": "/_app"
    },
    "/_app/posts/$postId": {
      "filePath": "_app/posts/$postId.tsx",
      "parent": "/_app"
    },
    "/_left-sidebar/badges/new": {
      "filePath": "_left-sidebar/badges/new.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/communities/$slug": {
      "filePath": "_left-sidebar/communities/$slug.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/post/create": {
      "filePath": "_left-sidebar/post/create.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/post/drafts": {
      "filePath": "_left-sidebar/post/drafts.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/username/$username": {
      "filePath": "_left-sidebar/username/$username.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/badges/": {
      "filePath": "_left-sidebar/badges/index.tsx",
      "parent": "/_left-sidebar"
    },
    "/_left-sidebar/communities/": {
      "filePath": "_left-sidebar/communities/index.tsx",
      "parent": "/_left-sidebar"
    }
  }
}
ROUTE_MANIFEST_END */
