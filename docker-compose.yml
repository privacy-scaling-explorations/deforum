services:
  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: supabase-db
    environment:
      POSTGRES_USER: ${SUPABASE_DB_USER}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      POSTGRES_DB: ${SUPABASE_DB_NAME}
    volumes:
      - supabase-db-data:/var/lib/postgresql/data
      - ./apps/db/supabase/init:/docker-entrypoint-initdb.d
      - ./apps/db/init-db:/docker-entrypoint-initdb.d/regular
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - internal

  supabase-rest:
    image: postgrest/postgrest
    container_name: supabase-rest
    depends_on:
      supabase-db:
        condition: service_healthy
    ports:
      - "3002:3000"
    environment:
      PGRST_DB_URI: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      PGRST_DB_SCHEMA: ${SUPABASE_DB_SCHEMA}
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_LOG_LEVEL: debug
    restart: unless-stopped
    networks:
      - internal

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    depends_on:
      supabase-db:
        condition: service_healthy
      supabase-rest:
        condition: service_started
    environment:
      DATABASE_URL: postgres://${SUPABASE_DB_USER}:${SUPABASE_DB_PASSWORD}@supabase-db:5432/${SUPABASE_DB_NAME}
      NODE_ENV: ${NODE_ENV}
      API_PORT: ${API_PORT}
      API_HOST: ${API_HOST}
      SUPABASE_URL: http://supabase-rest:3000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      SUPABASE_JWT_SECRET: ${JWT_SECRET}
    env_file:
      - .env
    develop:
      watch:
        - action: sync
          path: ./apps/api/src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./apps/shared
          target: /app/shared
          ignore:
            - node_modules/
            - dist/
        - action: rebuild
          path: ./apps/api/package.json
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - internal

  client:
    build:
      context: .
      dockerfile: apps/client/Dockerfile
    platform: linux/amd64
    ports:
      - "3000:3000"
    depends_on:
      api:
        condition: service_healthy
    environment:
      VITE_API_URL: http://api:5000/api
      VITE_SUPABASE_URL: http://supabase-rest:3000
      VITE_SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
    env_file:
      - .env
    command: sh -c "yarn workspace client run dev"
    develop:
      watch:
        - action: sync
          path: ./apps/client/src
          target: /app/src
          ignore:
            - node_modules/
            - dist/
        - action: sync
          path: ./apps/shared
          target: /app/shared
          ignore:
            - node_modules/
            - dist/
        - action: rebuild
          path: ./apps/client/package.json
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - internal
  studio:
    container_name: supabase-studio
    image: supabase/studio
    restart: unless-stopped
    ports:
      - "3001:8000"
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "fetch('http://studio:3000/api/platform/profile').then((r) => {if (r.status !== 200) throw new Error(r.status)})"
        ]
      timeout: 10s
      interval: 5s
      retries: 3
    environment:
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD}
      SUPABASE_URL: http://supabase-rest:3000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY}
      SUPABASE_SERVICE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
      AUTH_JWT_SECRET: ${JWT_SECRET}
    networks:
      - internal


volumes:
  supabase-db-data:

networks:
  internal:
    driver: bridge
